// Generated by Dagger (https://dagger.dev).
package com.example.irentmovie.data;

import com.example.irentmovie.data.repositories.ModelRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class DatabaseModule_ProvideModelRepositoryFactory implements Factory<ModelRepository> {
  private final Provider<AppDatabase> databaseProvider;

  public DatabaseModule_ProvideModelRepositoryFactory(Provider<AppDatabase> databaseProvider) {
    this.databaseProvider = databaseProvider;
  }

  @Override
  public ModelRepository get() {
    return provideModelRepository(databaseProvider.get());
  }

  public static DatabaseModule_ProvideModelRepositoryFactory create(
      Provider<AppDatabase> databaseProvider) {
    return new DatabaseModule_ProvideModelRepositoryFactory(databaseProvider);
  }

  public static ModelRepository provideModelRepository(AppDatabase database) {
    return Preconditions.checkNotNullFromProvides(DatabaseModule.INSTANCE.provideModelRepository(database));
  }
}
